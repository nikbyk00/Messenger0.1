{"version":3,"sources":["WebSock.jsx","App.js","index.js"],"names":["WebSock","useState","messages","setMessages","value","setValue","socket","useRef","connected","setConnected","username","setUsername","sendMessage","message","id","Date","now","event","current","send","JSON","stringify","className","onChange","e","target","type","onClick","map","mess","placeholder","WebSocket","onopen","onmessage","parse","data","prev","onclose","console","log","onerror","App","ReactDOM","render","document","getElementById"],"mappings":"mMA2FeA,EArFC,WACZ,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAASC,mBACf,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,mBAAS,IAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KA0BA,IAAMC,EAAW,iDAAG,8FACVC,EAAU,CACZH,WACAG,QAAST,EACTU,GAAIC,KAAKC,MACTC,MAAO,WAEXX,EAAOY,QAAQC,KAAKC,KAAKC,UAAUR,IACnCR,EAAS,IARO,2CAAH,qDAYjB,OAAKG,EAiBD,qBAAKc,UAAU,SAAf,SACI,gCACI,sBAAKA,UAAU,OAAf,UACI,uBAAOlB,MAAOA,EAAOmB,SAAU,SAAAC,GAAC,OAAInB,EAASmB,EAAEC,OAAOrB,MAAtB,EAA8BsB,KAAK,SACnE,wBAAQC,QAASf,EAAjB,uEAEJ,qBAAKU,UAAU,WAAf,SACKpB,EAAS0B,KAAI,SAAAC,GAAI,OACd,8BACoB,eAAfA,EAAKZ,MACA,sBAAKK,UAAU,qBAAf,sFACgBO,EAAKnB,SADrB,yEAGA,sBAAKY,UAAU,UAAf,UACGO,EAAKnB,SADR,KACoBmB,EAAKhB,YANzBgB,EAAKf,GADD,WAtB1B,qBAAKQ,UAAU,SAAf,SACI,sBAAKA,UAAU,OAAf,UACI,uBACIlB,MAAOM,EACPa,SAAU,SAAAC,GAAC,OAAIb,EAAYa,EAAEC,OAAOrB,MAAzB,EACXsB,KAAK,OACLI,YAAY,2FAChB,wBAAQH,QA7CxB,WACIrB,EAAOY,QAAU,IAAIa,UAAU,uBAE/BzB,EAAOY,QAAQc,OAAS,WACpBvB,GAAa,GACb,IAAMI,EAAU,CACZI,MAAO,aACPP,WACAI,GAAIC,KAAKC,OAEbV,EAAOY,QAAQC,KAAKC,KAAKC,UAAUR,GACtC,EACDP,EAAOY,QAAQe,UAAY,SAAChB,GACxB,IAAMJ,EAAUO,KAAKc,MAAMjB,EAAMkB,MACjChC,GAAY,SAAAiC,GAAI,OAAKvB,GAAL,mBAAiBuB,GAAjB,GACnB,EACD9B,EAAOY,QAAQmB,QAAS,WACpBC,QAAQC,IAAI,8CACf,EACDjC,EAAOY,QAAQsB,QAAU,WACrBF,QAAQC,IAAI,qGACf,CACJ,EAuBe,gDA+BnB,EC3EcE,MAVf,WAEI,OACI,8BACI,cAAC,EAAD,KAGX,ECPDC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,Q","file":"static/js/main.94e01b5c.chunk.js","sourcesContent":["import React, {\r\n    useRef,\r\n    useState\r\n} from 'react';\r\n\r\n\r\nconst WebSock = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [value, setValue] = useState('');\r\n    const socket = useRef()\r\n    const [connected, setConnected] = useState(false);\r\n    const [username, setUsername] = useState('')\r\n\r\n    function connect() {\r\n        socket.current = new WebSocket('ws://localhost:9000')\r\n\r\n        socket.current.onopen = () => {\r\n            setConnected(true)\r\n            const message = {\r\n                event: 'connection',\r\n                username,\r\n                id: Date.now()\r\n            }\r\n            socket.current.send(JSON.stringify(message))\r\n        }\r\n        socket.current.onmessage = (event) => {\r\n            const message = JSON.parse(event.data)\r\n            setMessages(prev => [message, ...prev])\r\n        }\r\n        socket.current.onclose= () => {\r\n            console.log('Socket закрыт')\r\n        }\r\n        socket.current.onerror = () => {\r\n            console.log('Socket произошла ошибка')\r\n        }\r\n    }\r\n\r\n    const sendMessage = async () => {\r\n        const message = {\r\n            username,\r\n            message: value,\r\n            id: Date.now(),\r\n            event: 'message'\r\n        }\r\n        socket.current.send(JSON.stringify(message));\r\n        setValue('')\r\n    }\r\n\r\n\r\n    if (!connected) {\r\n        return (\r\n            <div className=\"center\">\r\n                <div className=\"form\">\r\n                    <input\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}\r\n                        type=\"text\"\r\n                        placeholder=\"Введите ваше имя\"/>\r\n                    <button onClick={connect}>Войти</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <div>\r\n                <div className=\"form\">\r\n                    <input value={value} onChange={e => setValue(e.target.value)} type=\"text\"/>\r\n                    <button onClick={sendMessage}>Отправить</button>\r\n                </div>\r\n                <div className=\"messages\">\r\n                    {messages.map(mess =>\r\n                        <div key={mess.id}>\r\n                            {mess.event === 'connection'\r\n                                ? <div className=\"connection_message\">\r\n                                    Пользователь {mess.username} подключился\r\n                                </div>\r\n                                : <div className=\"message\">\r\n                                    {mess.username}. {mess.message}\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WebSock;","import React from 'react';\r\nimport './app.css'\r\nimport WebSock from \"./WebSock\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div>\r\n            <WebSock/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}